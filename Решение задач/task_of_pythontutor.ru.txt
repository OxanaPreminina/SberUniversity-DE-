1. Напишите программу, которая считывает длины двух катетов в прямоугольном треугольнике и выводит его площадь. Каждое число записано в отдельной строке.

b, h = int(input()), int(input())
print(1/2 * b * h)


2. n школьников делят k яблок поровну, неделящийся остаток остается в корзинке. Сколько яблок достанется каждому школьнику? Сколько яблок останется в корзинке? Программа получает на вход числа n и k и должна вывести искомое количество яблок (два числа).

n = int(input())
k = int(input())
print(k // n)
print(k % n)


3. Дано число n. С начала суток прошло n минут. Определите, сколько часов и минут будут показывать электронные часы в этот момент. Программа должна вывести два числа: количество часов (от 0 до 23) и количество минут (от 0 до 59). Учтите, что число n может быть больше, чем количество минут в сутках.

n = int(input())

hour = n // 60
minuts = n % 60
while hour > 23:
    hour -= 24
print(hour, minuts, sep='\n')


4. В школе решили набрать три новых математических класса. Так как занятия по математике у них проходят в одно и то же время, было решено выделить кабинет для каждого класса и купить в них новые парты. За каждой партой может сидеть не больше двух учеников. Известно количество учащихся в каждом из трёх классов. Сколько всего нужно закупить парт чтобы их хватило на всех учеников? Программа получает на вход три натуральных числа: количество учащихся в каждом из трех классов.

a, b, c = int(input()), int(input()), int(input())
cnt_a = a // 2
if a % 2 != 0:
    cnt_a += 1
cnt_b = b // 2
if b % 2 != 0:
    cnt_b += 1
cnt_c = c // 2
if c % 2 != 0:
    cnt_c += 1
print(cnt_a + cnt_b + cnt_c)


5. Обувная фабрика собирается начать выпуск элитной модели ботинок. Дырочки для шнуровки будут расположены в два ряда, расстояние между рядами равно a, а расстояние между дырочками в ряду b. Количество дырочек в каждом ряду равно N. Шнуровка должна происходить элитным способом “наверх, по горизонтали в другой ряд, наверх, по горизонтали и т.д.” (см. рисунок). Кроме того, чтобы шнурки можно было завязать элитным бантиком, длина свободного конца шнурка должна быть l. Какова должна быть длина шнурка для этих ботинок?
Программа получает на вход четыре натуральных числа a, b, l и N - именно в таком порядке - и должна вывести одно число - искомую длину шнурка.

a, b, l, N = int(input()), int(input()), int(input()), int(input())
print(a * ((N - 1) * 2 + 1) + b * (N - 1) * 2 + l * 2)


6. Даны два целых числа. Выведите значение наименьшего из них.

n, m = int(input()),  int(input())
if n < m:
    print(n)
else:
    print(m)


7. В математике функция sign(x) (знак числа) определена так:
sign(x) = 1, если x > 0,
sign(x) = -1, если x < 0,
sign(x) = 0, если x = 0.
Для данного числа x выведите значение sign(x). Эту задачу желательно решить с использованием каскадных инструкций if... elif... else.

x =  int(input())
if x > 0:
    print(1)
elif x < 0:
    print(-1)  
else:
    print(0)


8. Заданы две клетки шахматной доски. Если они покрашены в один цвет, то выведите слово YES, а если в разные цвета — то NO. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.

x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if abs(x1 % 2 - y1 % 2) == abs(x2 % 2 - y2 % 2):
    print('YES')
else:
    print('NO')


9. Дано натуральное число. Требуется определить, является ли год с данным номером високосным. Если год является високосным, то выведите YES, иначе выведите NO. Напомним, что в соответствии с григорианским календарем, год является високосным, если его номер кратен 4, но не кратен 100, а также если он кратен 400.

n = int(input())
if (n % 4 == 0 and n % 100 != 0) or n % 400 == 0:
    print('YES')
else:
    print('NO')


10. Даны три целых числа. Выведите значение наименьшего из них.

a, b, c = int(input()), int(input()), int(input())
if a < b:
    if a < c:
        print(a)
    else:
        print(c)
else:
    if b < c:
        print(b)
    else:
        print(c)


11. Даны три целых числа. Определите, сколько среди них совпадающих. Программа должна вывести одно из чисел: 3 (если все совпадают), 2 (если два совпадает) или 0 (если все числа различны).

a, b, c = int(input()), int(input()), int(input())
if a == b and a == c:
    print(3)
elif a != b and a != c and b != c:
    print(0)
else:
    print(2)


12. Шахматная ладья ходит по горизонтали или вертикали. Даны две различные клетки шахматной доски, определите, может ли ладья попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести YES, если из первой клетки ходом ладьи можно попасть во вторую или NO в противном случае.

x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if (x2 - x1 == 0) or (y2 - y1 == 0):
    print("YES")
else:
    print("NO")


13. Шахматный король ходит по горизонтали, вертикали и диагонали, но только на 1 клетку. Даны две различные клетки шахматной доски, определите, может ли король попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести YES, если из первой клетки ходом короля можно попасть во вторую или NO в противном случае.

x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if abs(x2 - x1) <= 1 and abs(y2 - y1) <= 1:
    print('YES')
else:
    print('NO')


14. Шахматный слон ходит по диагонали. Даны две различные клетки шахматной доски, определите, может ли слон попасть с первой клетки на вторую одним ходом.

x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if abs(x2 - x1) == abs(y2 - y1):
    print('YES')
else:
    print('NO')


15. Шахматный ферзь ходит по диагонали, горизонтали или вертикали. Даны две различные клетки шахматной доски, определите, может ли ферзь попасть с первой клетки на вторую одним ходом.

x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if (abs(x2 - x1) == abs(y2 - y1)) or x2 == x1  or y2 == y1:
    print('YES')
else:
    print('NO')


16. Шахматный конь ходит буквой “Г” — на две клетки по вертикали в любом направлении и на одну клетку по горизонтали, или наоборот. Даны две различные клетки шахматной доски, определите, может ли конь попасть с первой клетки на вторую одним ходом.

x1, y1, x2, y2 = int(input()), int(input()), int(input()), int(input())
if (abs(x2 - x1) == 2 and abs(y2 - y1) == 1) or (abs(x2 - x1) == 1 and abs(y2 - y1) == 2):
    print('YES')
else:
    print('NO')


17. Шоколадка имеет вид прямоугольника, разделенного на n×m долек. Шоколадку можно один раз разломить по прямой на две части. Определите, можно ли таким образом отломить от шоколадки часть, состоящую ровно из k долек. Программа получает на вход три числа: n, m, k и должна вывести YES или NO.

n, m, k = int(input()), int(input()), int(input())
if (k % n == 0 or k % m == 0) and k < n * m:
    print('YES')
else:
    print('NO')


18. Яша плавал в бассейне размером N × M метров и устал. В этот момент он обнаружил, что находится на расстоянии x метров от одного из длинных бортиков (не обязательно от ближайшего) и y метров от одного из коротких бортиков. Какое минимальное расстояние должен проплыть Яша, чтобы выбраться из бассейна на бортик? Программа получает на вход числа N, M, x, y. Программа должна вывести число метров, которое нужно проплыть Яше до бортика.

N, M, x, y = int(input()), int(input()), int(input()), int(input())
L_short = min(N, M)
L_long = max(N, M)
if x > L_short / 2:
    x = L_short - x
if y > L_long / 2:
    y = L_long - y
print(min(x,y))


19. Дано натуральное число. Выведите его последнюю цифру.

n = int(input())
print(n % 10)


20. Длина Московской кольцевой автомобильной дороги —109 километров. Байкер Вася стартует с нулевого километра МКАД и едет со скоростью v километров в час. На какой отметке он остановится через t часов?
Программа получает на вход значение v и t. Если v>0, то Вася движется в положительном направлении по МКАД, если же значение v<0, то в отрицательном.
Программа должна вывести целое число от 0 до 108 — номер отметки, на которой остановится Вася.

v, t = int(input()), int(input())
L = (v * t) % 109

print(L)


21. Дано положительное действительное число X. Выведите его дробную часть.

x = float(input())
import math
X = x - int(x)
print(X)


22. Дано положительное действительное число X. Выведите его первую цифру после десятичной точки.

x = float(input())
digit = (x * 10) % 10
print(int(digit))


23. В некоторой школе занятия начинаются в 9:00. Продолжительность урока — 45 минут, после 1-го, 3-го, 5-го и т.д. уроков перемена 5 минут, а после 2-го, 4-го, 6-го и т.д. — 15 минут. 
Дан номер урока (число от 1 до 10). Определите, когда заканчивается указанный урок. 
Выведите два целых числа: время окончания урока в часах и минутах.

n = int(input())
from math import floor
M = 45*n + 5*(n-1) + 10*floor((n-1)/2)
hours = M // 60
minutes = M % 60

print(int(9 + hours))
print(int(minutes))


24. За день машина проезжает n километров. Сколько дней нужно, чтобы проехать маршрут длиной m километров? Программа получает на вход числа n и m.

n, m = int(input()), int(input())
from math import ceil
print(ceil(m / n))


25. Пирожок в столовой стоит a рублей и b копеек. Определите, сколько рублей и копеек нужно заплатить за n пирожков. Программа получает на вход три числа: a, b, n, и должна вывести два числа: стоимость покупки в рублях и копейках.

a, b, n = int(input()), int(input()), int(input())
kop = (a*100 + b) * n
print(kop // 100)
print(kop % 100)


26. Даны значения двух моментов времени, принадлежащих одним и тем же суткам: часы, минуты и секунды для каждого из моментов времени. Известно, что второй момент времени наступил не раньше первого. Определите, сколько секунд прошло между двумя моментами времени.
Программа на вход получает три целых числа: часы, минуты, секунды, задающие первый момент времени и три целых числа, задающих второй момент времени.
Выведите число секунд между этими моментами времени.

h1, m1, s1 = int(input()), int(input()), int(input())
h2, m2, s2 = int(input()), int(input()), int(input())
time1 = h1*3600 + m1*60 + s1
time2 = h2*3600 + m2*60 + s2
print(time2 - time1)


27. Улитка ползет по вертикальному шесту высотой h метров, поднимаясь за день на a метров, а за ночь спускаясь на b метров. На какой день улитка доползет до вершины шеста?
Программа получает на вход натуральные числа h, a, b.
Программа должна вывести одно натуральное число. Гарантируется, что a>b.

h, a, b = int(input()), int(input()), int(input())
from math import ceil
print(ceil((h - b) / (a - b)))


28. Дано натуральное число. Найдите число десятков в его десятичной записи.

n = int(input())
print((n//10)%10)


29. Длина Московской кольцевой автомобильной дороги —109 километров. Байкер Вася стартует с нулевого километра МКАД и едет со скоростью v километров в час. На какой отметке он остановится через t часов?
Программа получает на вход значение v и t. Если v>0, то Вася движется в положительном направлении по МКАД, если же значение v<0, то в отрицательном.
Программа должна вывести целое число от 0 до 108 — номер отметки, на которой остановится Вася.
v, t = int(input()), int(input())
L = (v * t) % 109

print(L)


30. Дано положительное действительное число X. Выведите его дробную часть.
x = float(input())
import math
X = x - int(x)
print(X)


31. Дано положительное действительное число X. Выведите его первую цифру после десятичной точки.

x = float(input())
digit = (x * 10) % 10
print(int(digit))


32. В некоторой школе занятия начинаются в 9:00. Продолжительность урока — 45 минут, после 1-го, 3-го, 5-го и т.д. уроков перемена 5 минут, а после 2-го, 4-го, 6-го и т.д. — 15 минут.
Дан номер урока (число от 1 до 10). Определите, когда заканчивается указанный урок.
Выведите два целых числа: время окончания урока в часах и минутах.

n = int(input())
from math import floor
M = 45*n + 5*(n-1) + 10*floor((n-1)/2)
hours = M // 60
minutes = M % 60

print(int(9 + hours))
print(int(minutes))


33. За день машина проезжает n километров. Сколько дней нужно, чтобы проехать маршрут длиной m километров? Программа получает на вход числа n и m.

n, m = int(input()), int(input())
from math import ceil
print(ceil(m / n))


34. Пирожок в столовой стоит a рублей и b копеек. Определите, сколько рублей и копеек нужно заплатить за n пирожков. Программа получает на вход три числа: a, b, n, и должна вывести два числа: стоимость покупки в рублях и копейках.

a, b, n = int(input()), int(input()), int(input())
kop = (a*100 + b) * n
print(kop // 100)
print(kop % 100)


35. Даны значения двух моментов времени, принадлежащих одним и тем же суткам: часы, минуты и секунды для каждого из моментов времени. Известно, что второй момент времени наступил не раньше первого. Определите, сколько секунд прошло между двумя моментами времени.
Программа на вход получает три целых числа: часы, минуты, секунды, задающие первый момент времени и три целых числа, задающих второй момент времени.
Выведите число секунд между этими моментами времени.

h1, m1, s1 = int(input()), int(input()), int(input())
h2, m2, s2 = int(input()), int(input()), int(input())
time1 = h1*3600 + m1*60 + s1
time2 = h2*3600 + m2*60 + s2
print(time2 - time1)


36. Улитка ползет по вертикальному шесту высотой h метров, поднимаясь за день на a метров, а за ночь спускаясь на b метров. На какой день улитка доползет до вершины шеста?
Программа получает на вход натуральные числа h, a, b.
Программа должна вывести одно натуральное число. Гарантируется, что a>b.

h, a, b = int(input()), int(input()), int(input())
from math import ceil
print(ceil((h - b) / (a - b)))


37. Дано натуральное число. Найдите число десятков в его десятичной записи.

n = int(input())
print((n//10)%10)


38. Дано трехзначное число. Найдите сумму его цифр.

n = int(input())
dig3 = n % 10
dig2 = n // 10 % 10
dig1 = n // 100 
print(dig1 + dig2 + dig3)


39. Дано два числа a и b. Выведите гипотенузу треугольника с заданными катетами.

a, b = int(input()), int(input())
from math import sqrt
print(sqrt(a**2 + b**2))


40. С начала суток прошло H часов, M минут, S секунд (0 ≤ H < 12, 0 ≤ M < 60, 0 ≤ S < 60). По данным числам H, M, S определите угол (в градусах), на который повернулаcь часовая стрелка с начала суток и выведите его в виде действительного числа.

H, M, S = int(input()), int(input()), int(input())
h = H + M/60 + S/3600
grad = h*(360/12)

print(grad)


41. С начала суток часовая стрелка повернулась на угол в α градусов. Определите на какой угол повернулась минутная стрелка с начала последнего часа. Входные и выходные данные — действительные числа.

a = float(input())
H = a*12/360
M = (H - int(H)) * 60
print(M*360/60)


42. Даны два целых числа A и B (при этом A ≤ B). Выведите все числа от A до B включительно.

A, B = int(input()), int(input())
for i in range(A, B + 1):
    print(i)


43. Даны два целых числа A и В. Выведите все числа от A до B включительно, в порядке возрастания, если A < B, или в порядке убывания в противном случае.

A, B = int(input()), int(input())
if A < B:
    for i in range(A, B + 1):
        print(i)
else:
    for i in range(A, B - 1, -1):
        print(i)


44. Даны два целых числа A и В, A>B. Выведите все нечётные числа от A до B включительно, в порядке убывания. В этой задаче можно обойтись без инструкции if.

A, B = int(input()), int(input())
if A % 2 == 0:
    A -= 1
for i in range(A, B - 1, -2):
    print(i)


45. Дано 10 целых чисел. Вычислите их сумму. Напишите программу, использующую наименьшее число переменных.

total = 0
for i in range(10):
    total += int(input())
print(total)


46. Дано несколько чисел. Вычислите их сумму. Сначала вводите количество чисел N, затем вводится ровно N целых чисел. Какое наименьшее число переменных нужно для решения этой задачи?

N = int(input())
result = 0
for i in range(N):
    result += int(input())
    
print(result)


47. По данному натуральному n вычислите сумму 13+23+33+...+n3.

n = int(input())
result = 0
for i in range(1, n + 1):
    result += i ** 3
print(result)


48. Факториалом числа n называется произведение 1 × 2 × ... × n. Обозначение: n!.
По данному натуральному n вычислите значение n!. Пользоваться математической библиотекой math в этой задаче запрещено.

n = int(input())
result = 1
for i in range(1, n + 1):
    result *= i
print(result)


49. По данному натуральном n вычислите сумму 1!+2!+3!+...+n!. В решении этой задачи можно использовать только один цикл. Пользоваться математической библиотекой math в этой задаче запрещено.

n = int(input())
result = 1
total = 0
for i in range(1, n + 1):
    result *= i
    total += result
print(total)


50. Дано N чисел: сначала вводится число N, затем вводится ровно N целых чисел. Подсчитайте количество нулей среди введенных чисел и выведите это количество. Вам нужно подсчитать количество чисел, равных нулю, а не количество цифр.

N = int(input())
count = 0
for i in range(N):
    if int(input()) == 0:
        count += 1
print(count)


51. По данному натуральному n ≤ 9 выведите лесенку из n ступенек, i-я ступенька состоит из чисел от 1 до i без пробелов.

n = int(input())
for i in range(1, n + 1):
    for j in range(1, i + 1):
        print(j, end='')
    print()


52. Дана строка, состоящая из слов, разделенных пробелами. Определите, сколько в ней слов. Используйте для решения задачи метод count.

string = input()
print(string.count(' ') + 1)


53. Дана строка. Разрежьте ее на две равные части (если длина строки — четная, а если длина строки нечетная, то длина первой части должна быть на один символ больше). Переставьте эти две части местами, результат запишите в новую строку и выведите на экран.
При решении этой задачи не стоит пользоваться инструкцией if.

from math import ceil
string = input()
n = ceil(len(string) / 2)
str_1 = string[:n]
str_2 = string[n:]
print(str_2 + str_1)


54. Дана строка, состоящая ровно из двух слов, разделенных пробелом. Переставьте эти слова местами. Результат запишите в строку и выведите получившуюся строку.
При решении этой задачи не стоит пользоваться циклами и инструкцией if.

string = input()
n = string.find(' ')
print(string[n+1:] + ' ' + string[:n])


55. Дана строка. Если в этой строке буква f встречается только один раз, выведите её индекс. Если она встречается два и более раз, выведите индекс её первого и последнего появления. Если буква f в данной строке не встречается, ничего не выводите.
При решении этой задачи не стоит использовать циклы.

string = input()
if string.count('f') == 1:
    print(string.find('f'))
elif string.count('f') > 1:
    print(string.find('f'), string.rfind('f'))


56. Дана строка. Найдите в этой строке второе вхождение буквы f, и выведите индекс этого вхождения. Если буква f в данной строке встречается только один раз, выведите число -1, а если не встречается ни разу, выведите число -2.

string = input()
if string.count('f') == 1:
    print(-1)
elif string.count('f') > 1:
    ind_first = string.find('f')
    print(string.find('f', string.find('f') + 1))
else:
    print(-2)


57. Дана строка, в которой буква h встречается минимум два раза. Удалите из этой строки первое и последнее вхождение буквы h, а также все символы, находящиеся между ними.

s = input()
s = s[:s.find('h')] + s[s.rfind('h')+1:]
print(s)


58. Дана строка, в которой буква h встречается как минимум два раза. Разверните последовательность символов, заключенную между первым и последним появлением буквы h, в противоположном порядке.

s = input()
s = s[:s.find('h')] + s[s.rfind('h'):s.find('h'):-1] + s[s.rfind('h'):]
print(s)


59. Дана строка. Замените в этой строке все цифры 1 на слово one.

s = input()
s = s.replace('1', 'one')
print(s)


60. Дана строка. Удалите из этой строки все символы @.

s = input()
s = s.replace('@', '')
print(s)


61. Дана строка. Замените в этой строке все появления буквы h на букву H, кроме первого и последнего вхождения.

s = input()
s = s[:s.find('h') + 1] + s[s.find('h') + 1:s.rfind('h')].replace('h', 'H') + s[s.rfind('h'):]
print(s)


62. Дана строка. Удалите из нее все символы, чьи индексы делятся на 3.

string = input()
s = ''
for i in range(len(string)):
    if i % 3 == 0:
        continue
    else:
        s += string[i]
string = s        
print(string)


63. По данному целому числу N распечатайте все квадраты натуральных чисел, не превосходящие N, в порядке возрастания.

N = int(input())
i = 1
while i ** 2 <= N:
    print(i ** 2, end=' ')
    i += 1


64. Дано целое число, не меньшее 2. Выведите его наименьший натуральный делитель, отличный от 1.

n = int(input())
i = 2
while n > 1:
    if n % i == 0:
        print(i)
        break
    i += 1


65. По данному натуральному числу N найдите наибольшую целую степень двойки, не превосходящую N. Выведите показатель степени и саму степень.
Операцией возведения в степень пользоваться нельзя!

N = int(input())
i = 1
while 2 ** i <= N:
    i += 1
print(i-1, 2**(i-1), end=' ')


66. В первый день спортсмен пробежал x километров, а затем он каждый день увеличивал пробег на 10% от предыдущего значения. По данному числу y определите номер дня, на который пробег спортсмена составит не менее y километров.
Программа получает на вход действительные числа x и y и должна вывести одно натуральное число.

x, y = int(input()), int(input())
day = 1
while x < y:
    day += 1
    x *= 1.1
print(day)


67. Программа получает на вход последовательность целых неотрицательных чисел, каждое число записано в отдельной строке. Последовательность завершается числом 0, при считывании которого программа должна закончить свою работу и вывести количество членов последовательности (не считая завершающего числа 0). Числа, следующие за числом 0, считывать не нужно.

cnt = 0
n = int(input())
while n != 0:
    n = int(input())
    cnt += 1
print(cnt)


68. Определите сумму всех элементов последовательности, завершающейся числом 0. В этой и во всех следующих задачах числа, следующие за первым нулем, учитывать не нужно.

n = int(input())
total = n
while n != 0:
    n = int(input())
    total += n
print(total)


69. Определите среднее значение всех элементов последовательности, завершающейся числом 0.

n = int(input())
sum = 0
cnt = 0
while n != 0:
    sum += n
    cnt += 1
    n = int(input())
print(sum / cnt)


70. Последовательность состоит из натуральных чисел и завершается числом 0. Определите значение наибольшего элемента последовательности.

n = int(input())
max_elem = n
while n != 0:
    if n > max_elem:
        max_elem = n
    n = int(input())
print(max_elem)


71. Последовательность состоит из натуральных чисел и завершается числом 0. Определите индекс наибольшего элемента последовательности. Если наибольших элементов несколько, выведите индекс первого из них. Нумерация элементов начинается с нуля.

n = int(input())
numbers = [n]  
largest = n
i = 0
while n != 0:
    if numbers[i] > largest:
        largest = numbers[i]
    i += 1
    n = int(input())
    numbers.append(n)
index = numbers.index(largest)  
print(index)


72. Определите количество четных элементов в последовательности, завершающейся числом 0.

elem = int(input())
cnt = 0
while elem != 0:
    if elem % 2 == 0:
        cnt += 1
    elem = int(input())
print(cnt)


73. Последовательность состоит из натуральных чисел и завершается числом 0. Определите, сколько элементов этой последовательности больше предыдущего элемента.

elem_1 = int(input())
cnt = 0
while elem_1 != 0:
    elem_2 = int(input())
    if elem_2 > elem_1:
        cnt += 1
    elem_1 = elem_2
print(cnt)











